weight = paste(as.character(Weight), "kg", sep = "")
return(filter(allDesign, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
return(filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(allDesign, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
tmp2 <- allDesign[tmp]
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
tmp2 <- allDesign[tmp,]
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
#tmp2 <- allDesign[tmp,]
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
tmp2 <- which(allDesign==tmp)
return(tmp2)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }})
tmp2 <- allDesign(which(allDesign==tmp)}
return(tmp2)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1,RAM = 4,Memory = 126,Processor = 3, Weight = 1.2,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- which(allDesign==c(Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
#tmp2 <- allDesign(which(allDesign==tmp)}
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- which(allDesign==c(Price == Price, RAM == ram, Memory ==  memory, Processor == processor, Weight == weight, ScreenSize == ScreenSize))
#tmp2 <- allDesign(which(allDesign==tmp)}
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
tmp <- which(allDesign==c(Price == "0.7", RAM == "4", Memory ==  "126GB", Processor == "i3", Weight == "1.5", ScreenSize == "12"))
#tmp2 <- allDesign(which(allDesign==tmp)}
return(tmp)
}
#Entry market
entry1 <- ProductSelection(Price = 0.7,RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram = paste(as.character(RAM), "GB", sep = "")
memory = paste(as.character(Memory), "GB", sep = "")
processor = paste('i',as.character(Processor), sep = "")
weight = paste(as.character(Weight), "kg", sep = "")
return(filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram <-  paste(as.character(RAM), "GB", sep = "")
if(Memory==1) memory <- paste(as.character(Memory), "T", sep = "") else memory <-  paste(as.character(Memory), "GB", sep = "")
processor <-  paste('i',as.character(Processor), sep = "")
weight <-  paste(as.character(Weight), "kg", sep = "")
return(filter(laptops, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
#Entry market
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram <-  paste(as.character(RAM), "GB", sep = "")
if(Memory==1) memory <- paste(as.character(Memory), "T", sep = "") else memory <-  paste(as.character(Memory), "GB", sep = "")
processor <-  paste('i',as.character(Processor), sep = "")
weight <-  paste(as.character(Weight), "kg", sep = "")
return(filter(allDesign, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
#Entry market
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 1.2,ScreenSize = 12)
mid2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1,Processor = 3, Weight = 1.2,ScreenSize = 12)
View(mid2)
#Entry market
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 0.8,ScreenSize = 13)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 2, ScreenSize = 16)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 1.2,ScreenSize = 14)
#High end market
mid1 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512, Processor = 7, Weight = 1.5,ScreenSize = 14)
mid2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
#Entry market
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 0.8,ScreenSize = 13)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 2, ScreenSize = 16)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 1.2,ScreenSize = 14)
#High end market
high1 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512, Processor = 7, Weight = 1.5,ScreenSize = 14)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
profiles
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 2, ScreenSize = 16)
mid1
ProductSelection <- function(Price,RAM,Memory,Processor,Weight,ScreenSize){
ram <-  paste(as.character(RAM), "GB", sep = "")
if(Memory==1) memory <- paste(as.character(Memory), "T", sep = "") else memory <-  paste(as.character(Memory), "GB", sep = "")
processor <-  paste('i',as.character(Processor), sep = "")
weight <-  paste(as.character(Weight), "kg", sep = "")
return(filter(allDesign, Price == {{Price}}, RAM == {{ram}}, Memory == {{ memory }}, Processor == {{ processor }}, Weight == {{ weight }}, ScreenSize == {{ ScreenSize }}))
}
#Entry market
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.5,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 0.8,ScreenSize = 13)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 2, ScreenSize = 16)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 1.2,ScreenSize = 14)
#High end market
high1 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512, Processor = 7, Weight = 1.5,ScreenSize = 14)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
mid1
mid2
attributes <- list(Price=names(table(laptops.mlogit$Price)),
RAM=names(table(laptops.mlogit$RAM)),
Memory=names(table(laptops.mlogit$Memory)),
Processor=names(table(laptops.mlogit$Processor)),
Weight=names(table(laptops.mlogit$Weight)),
ScreenSize=names(table(laptops.mlogit$ScreenSize)))
allDesign <- expand.grid(attributes)
allDesign #all possible design
allDesign
View(allDesign)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 1.2,ScreenSize = 14)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 2, ScreenSize = 16)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 2,ScreenSize = 16)
View(laptops)
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 1.2,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 0.8,ScreenSize = 13)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 126,Processor = 5, Weight = 1, ScreenSize = 13)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 126,Processor = 7, Weight = 1.5,ScreenSize = 16)
#High end market
high1 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512, Processor = 7, Weight = 1.2,ScreenSize = 14)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
profiles
entry1 <- ProductSelection(Price = 0.7, RAM = 4,Memory = 126,Processor = 3, Weight = 0.8,ScreenSize = 12)
entry2 <- ProductSelection(Price = 1, RAM = 4,Memory = 126,Processor = 3, Weight = 1.2,ScreenSize = 13)
#Mid market
mid1 <- ProductSelection(Price = 1, RAM = 8,Memory = 256,Processor = 5, Weight = 1, ScreenSize = 13)
mid2 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512,Processor = 7, Weight = 1.5,ScreenSize = 16)
#High end market
high1 <- ProductSelection(Price = 1.5, RAM = 16,Memory = 512, Processor = 7, Weight = 1.2,ScreenSize = 14)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
profiles
#High end market
high1 <- ProductSelection(Price = 2, RAM = 16,Memory = 512, Processor = 7, Weight = 1.2,ScreenSize = 14)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 16)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
profiles
high1 <- ProductSelection(Price = 2, RAM = 16,Memory = 512, Processor = 7, Weight = 1.2,ScreenSize = 16)
high2 <- ProductSelection(Price = 2, RAM = 32,Memory = 1, Processor = 9, Weight = 1.5,ScreenSize = 14)
profiles <- rbind(entry1, entry2, mid1, mid2, high1, high2)
profiles
predict.mnl <- function(model, data) {
# Function for predicting preference shares from a MNL model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
#       predict shares.  Same format at the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
logitUtility <- data.model%*%model$coef
share <- exp(logitUtility)/sum(exp(logitUtility))
cbind(share, data)
}
predict.mnl(lm2, profiles) # using m2 specification
getmode <- function(df) {
tmp=laptops
tmp %>% which.max(tabulate(match(allDesign, tmp))) %>%  filter(tmp, tmp$choice=="1")
}
x <- getmode(laptops)
getmode <- function(df) {
tmp=laptops
tmp %>% tmp[which.max(tabulate(match(allDesign, tmp)))] %>%  filter(tmp, tmp$choice=="1")
}
x <- getmode(laptops)
getmode <- function(df) {
tmp=laptops
tmp %>% allDesign[which.max(tabulate(match(allDesign, tmp)))] %>%  filter(tmp, tmp$choice=="1")
}
x <- getmode(laptops)
getmode <- function(df) {
allDesign[which.max(tabulate(match(laptops, allDesign)))] %>%  filter(laptops, laptops$choice=="1") %>% select(colnames(laptops)-c("resp.id","qes", "alt"))
}
x <- getmode(laptops)
getmode <- function(df) {
laptops[which.max(tabulate(match(laptops, allDesign)))] %>%  filter(laptops, laptops$choice=="1") %>% select(colnames(laptops)-c("resp.id","qes", "alt"))
}
x <- getmode(laptops)
getmode <- function(v) {
uniqv <- unique(v) %>% select(colnames(laptops)-c("resp.id","qes", "alt"))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
x <- getmode(laptops)
sensitivity.mnl <- function(model, attrib, base.data, competitor.data) {
# Function for creating data for a preference share-sensitivity chart
# model: mlogit object returned by mlogit() function
# attrib: list of vectors with attribute levels to be used in sensitivity
# base.data: data frame containing baseline design of target product
# competitor.data: data frame contining design of competitive set
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}
base.data <- new.data[5,]
competitor.data <- new.data[-5,]
base.data <- profiles[5,]
competitor.data <- profiles[-5,]
base.data
competitor.data
profiles
(tradeoff <- sensitivity.mnl(m2, attributes, base.data, competitor.data))
(tradeoff <- sensitivity.mnl(m2, attributes, base.data, competitor.data))
(tradeoff <- sensitivity.mnl(lm2, attributes, base.data, competitor.data))
type(tradeoff)
str(tradeoff)
class(tradeoff)
(tradeoff <- sensitivity.mnl(lm2, attributes, base.data, competitor.data))
tradeoff <- sensitivity.mnl(lm2, attributes, base.data, competitor.data)
tradeoff
(tradeoff <- sensitivity.mnl(lm2, attributes, base.data, competitor.data))
tradeoff <- sensitivity.mnl(lm2, attributes, base.data, competitor.data)
tradeoff
class(tradeoff)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.1,0.11))
grid(nx=NA, ny=NULL)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.5,0.5))
View(tradeoff)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(min(tradeoff$increase),max(tradeoff$increase)))
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.1,max(tradeoff$increase)))
grid(nx=NA, ny=NULL)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.1,0.035))
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.1,0.35))
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for the Planned Product Design",
ylim=c(-0.1,0.4))
grid(nx=NA, ny=NULL)
base.data
competitor.data
m2.rpar <- rep("n", length=length(lm2$coef))
names(lm2.rpar) <- names(lm2$coef)
m2.rpar
lm2.rpar <- rep("n", length=length(lm2$coef))
names(lm2.rpar) <- names(lm2$coef)
lm2.rpar
plot(lm2)
lm2.mixed <- mlogit(choice ~ Price + RAM + Memory + Processor + Weight + ScreenSize  | -1,
data = laptops.mlogit,
panel=TRUE, rpar = lm2.rpar, correlation = FALSE)
lm2.rpar <- rep("n", length=length(lm2$coef))
names(lm2.rpar) <- names(lm2$coef)
lm2.rpar
lm2.mixed <- mlogit(choice ~ Price + RAM + Memory + Processor + Weight + ScreenSize  | -1,
data = laptops.mlogit,
panel=TRUE, rpar = lm2.rpar, correlation = FALSE)
summary(m2.mixed)
summary(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mar=c(1,1,1,1))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mar=c(1,1,1,1))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mar=c(1,1,1,1,1))
?par
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(c=(1,1,1,1))
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(c=(1,1,1,1))
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(fig = c(1,1,1,1))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(6,6)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(2,2))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(6,6))
plot(lm2.mixed)
lm2.mixed
size(par(mfrow=c(2,2)))
size(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(6,1))
plot(lm2.mixed)
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(6,1))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(6,4))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
par(mfrow=c(2,2))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
layout(matrix(c(3,3,2,3), 2, 2, byrow = TRUE),
widths=c(2,2), heights=c(2,2))
#par(mfrow=c(2,2))
plot(lm2.mixed)
# We can get a visual summary of the distribution of random effects and hence of the level of heterogeneity
layout(matrix(c(3,3,2,3), 2, 2, byrow = TRUE))
processor7.distr <- rpar(m2.mixed, "i7")
processor7.distr <- rpar(lm2.mixed, "i7")
summary(processor7.distr)
lm2.mixed
View(laptops)
summary(processor7.distr)
processor7.distr <- rpar(lm2.mixed, "Processori7")
summary(processor7.distr)
mean(processor7.distr)
med(processor7.distr)
plot(processor7.distr)
lm2.mixed
summary(lm2.mixed)
processor5.distr <- rpar(lm2.mixed, "Processori5")
summary(processor5.distr)
mean(processor5.distr)
med(processor5.distr)
plot(processor5.distr)
Weight1.5kg.distr <- rpar(lm2.mixed, "Weight1.5kg")
summary(Weight1.5kg.distr)
mean(Weight1.5kg.distr)
med(Weight1.5kg.distr)
plot(Weight1.5kg.distr)
par(mfrow=c(1,1))
processor5.distr <- rpar(lm2.mixed, "Processori5")
summary(processor5.distr)
mean(processor5.distr)
med(processor5.distr)
plot(processor5.distr)
Weight1.5kg.distr <- rpar(lm2.mixed, "Weight1.5kg")
summary(Weight1.5kg.distr)
mean(Weight1.5kg.distr)
med(Weight1.5kg.distr)
plot(Weight1.5kg.distr)
par(mfrow=c(2,1))
processor5.distr <- rpar(lm2.mixed, "Processori5")
summary(processor5.distr)
mean(processor5.distr)
med(processor5.distr)
plot(processor5.distr)
Weight1.5kg.distr <- rpar(lm2.mixed, "Weight1.5kg")
summary(Weight1.5kg.distr)
mean(Weight1.5kg.distr)
med(Weight1.5kg.distr)
plot(Weight1.5kg.distr)
par(mfrow=c(3,3))
par(mfrow=c(3,3))
processor5.distr <- rpar(lm2.mixed, "Processori5")
summary(processor5.distr)
mean(processor5.distr)
med(processor5.distr)
plot(processor5.distr)
Weight1.5kg.distr <- rpar(lm2.mixed, "Weight1.5kg")
summary(Weight1.5kg.distr)
mean(Weight1.5kg.distr)
med(Weight1.5kg.distr)
plot(Weight1.5kg.distr)
par(mfrow=c(2,2))
processor5.distr <- rpar(lm2.mixed, "Processori5")
summary(processor5.distr)
mean(processor5.distr)
med(processor5.distr)
plot(processor5.distr)
Weight1.5kg.distr <- rpar(lm2.mixed, "Weight1.5kg")
summary(Weight1.5kg.distr)
mean(Weight1.5kg.distr)
med(Weight1.5kg.distr)
plot(Weight1.5kg.distr)
plot(Weight1.5kg.distr, type = boxplot)
boxplot(Weight1.5kg~lm2.mixed)
lm2.mixed$coefficients
lm2.mixed2 <- update(lm2.mixed, correlation = TRUE)
summary(lm2.mixed2)
cov2cor(cov.mlogit(lm2.mixed2))
lm2.mixed3 <- update(lm2.mixed2, correlation = c("Price1", "Price1.5", "Price2", "RAM8GB","RAM16GB", "RAM32GB", "Memory256GB","Memory512GB", "Memory1T", "Processori5", "Processori7","Processori9", "Weight1kg", "Weight1.2kg", "Weight1.5kg", "ScreenSize13", "ScreenSize14", "ScreenSize16"))
summary(vcov(lm2.mixed2, what = "rpar", type = "cor"))
lm2.mixed3 <- update(lm2.mixed2, correlation = c("Price1.5", "RAM8GB","RAM16GB", "RAM32GB", "Memory256GB","Memory512GB", "Memory1T", "Processori5", "Processori7","Processori9", "Weight1kg", "Weight1.2kg", "Weight1.5kg", "ScreenSize13", "ScreenSize14", "ScreenSize16"))
lrtest(lm2, lm2.mixed) #Fixed effects vs. uncorrelated random effects
lrtest(lm2.mixed, lm2.mixed2) #Uncorrelated random effects vs. all correlated random effects
lrtest(lm2.mixed3, lm2.mixed2)
# Simulating shares
predict.mixed.mnl <- function(model, data, nresp=1000) {
# Function for predicting shares from a mixed MNL model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
#       predict shares. Same format at the data used to estimate model.
# Note that this code assumes all model parameters are random
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
coef.Sigma <- cov.mlogit(model)
coef.mu <- model$coef[1:dim(coef.Sigma)[1]]
draws <- mvrnorm(n=nresp, coef.mu, coef.Sigma)
shares <- matrix(NA, nrow=nresp, ncol=nrow(data))
for (i in 1:nresp) {
utility <- data.model%*%draws[i,]
share = exp(utility)/sum(exp(utility))
shares[i,] <- share
}
cbind(colMeans(shares), data)
}
set.seed(1111)
predict.mixed.mnl(m2.mixed2, data=new.data)
predict.mixed.mnl(lm2.mixed2, data=profiles)
# Simulating shares
library(MASS)
predict.mixed.mnl(lm2.mixed2, data=profiles)
laptops.mode <- Mode(laptops)
install.packages("DescTools")
library(DescTools)
laptops.mode <- Mode(laptops)
View(laptops)
View(allDesign)
